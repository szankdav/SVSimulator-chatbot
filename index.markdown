---
layout: post
title:  "Hogyan napl√≥zzunk √ºzeneteket discordon bot seg√≠ts√©g√©vel?"
date:   2025-02-26 12:52:20 +0100
categories: blog post
---
# Hogyan napl√≥zzunk √ºzeneteket discordon bot seg√≠ts√©g√©vel?

Szerintem nem t√∫lzok, ha azt mondom, hogy a Discord ma az egyik legsz√©lesebb k√∂rben haszn√°lt cseveg≈ëalkalmaz√°s. Hiszen sokkal t√∂bb enn√©l, √©s m√°ra m√°r neh√©z olyan ig√©nyt eml√≠teni, amire nincsen megold√°sa. Legyen sz√≥ munkahelyi vagy iskolai k√∂z√∂s munk√°r√≥l, szem√©lyes kapcsolattart√°sr√≥l, vide√≥h√≠v√°sokr√≥l vagy f√°jlk√ºld√©sr≈ël, a teljess√©g ig√©nye n√©lk√ºl. A k√∂z√∂ss√©gek szervereken csoportosulnak, ahol k√ºl√∂nb√∂z≈ë csatorn√°k szolg√°ltatj√°k a v√©gtelen sz√°m√∫ lehet≈ës√©get. Ezeken a szervereken tal√°lkozhatunk a botokkal.
    
A Discord botok olyan automatiz√°lt programok, amelyek a Discord API seg√≠ts√©g√©vel m≈±k√∂dnek, √©s k√ºl√∂nb√∂z≈ë feladatokat l√°tnak el egy szerveren. Ezek lehetnek egyszer≈±, egyfunkci√≥s botok vagy √∂sszetett rendszerek, amelyek t√∂bbf√©le interakci√≥t √©s szolg√°ltat√°st biztos√≠tanak a felhaszn√°l√≥k sz√°m√°ra. Feladatokat hajtanak v√©gre emberi beavatkoz√°s n√©lk√ºl, p√©ld√°ul √ºdv√∂zl≈ë √ºzeneteket k√ºldenek vagy moder√°lnak. Illetve automatiz√°lhatunk vel√ºk szinte b√°rmit, ha meg tudjuk val√≥s√≠tani. (m√≥dos√≠tva)
    
    
## Mir≈ël olvashatsz ebben a blogban
A projekthez tartozik egy prezent√°ci√≥, amit a blog olvas√°sa el≈ëtt aj√°nlott megn√©zni: https://github.com/szankdav/SliDev-presentations 

Ebben a prezent√°ci√≥ban bemutattam, hogy milyen technol√≥gi√°k seg√≠ts√©g√©vel k√©sz√ºlt el a Discord bot √©s a napl√≥z√≥ program. Ebben a bejegyz√©sben azt szeretn√©m bemutatni, hogy a k√≥don kereszt√ºl hogyan √©rj√ºk el azt, hogy egy szerveren tal√°lhat√≥ bot napl√≥zza az √ºzeneteket. L√©trehozunk egy botalkalmaz√°st, inicializ√°ljuk, √©s egy Node.js alkalmaz√°s seg√≠ts√©g√©vel elmentj√ºk az √°ltala ‚Äûelkapott‚Äù √ºzeneteket.
  
Amikor megkaptam ezt a feladatot, √∫gy √©reztem, hogy neh√©z lesz. Hiszen csak kimondani ezeket a dolgokat, hogy programozz egy botot, ami k√©pes erre, k√©pes arra, kezd≈ë fejleszt≈ëk√©nt nagy √©s neh√©z feladatnak t≈±nik. De v√©g√ºl kider√ºlt, hogy nem nehezebb, mint m√°s √∫j projektek. Csak dokument√°ci√≥kat kell olvasni, tanulni, √©s felhaszn√°lni a tanultakat.
    
## L√°ssuk
    
1.  A bot l√©trehoz√°sa:
    
Els≈ë, vagy ink√°bb nulladik l√©p√©sk√©nt l√©tre kell hoznunk a Discord Developer port√°lon a bot alkalmaz√°sunkat. Egy gyors regisztr√°ci√≥ ut√°n a sarokban tal√°lhat√≥ "New Application" gombra kattintva l√©trehozzuk az alkalmaz√°sunkat.

![enter image description here](https://i.ibb.co/cSjtp3fj/01.jpg)

![enter image description here](https://i.ibb.co/hFvL4nV6/02.jpg)

Az oldals√≥ navig√°ci√≥s s√°vban tal√°lhat√≥ **Bot** men√ºpont alatt megadunk egy nevet, majd gener√°lunk egy tokent. FONTOS! Ezt a tokent csak most fogjuk l√°tni, √≠gy ments√ºk le k√©s≈ëbbi felhaszn√°l√°sra.
    
![enter image description here](https://i.ibb.co/bRbnKRbX/03.jpg)
    
Az **OAuth2** men√ºpontra kattintva kipip√°ljuk a **"bot"** √©s **"applications.commands"** lehet≈ës√©geket, majd a lejjebb leny√≠l√≥ **"Bot Permissions"** ablakban kijel√∂lj√ºk azokat a jogosults√°gokat, amelyekkel szeretn√©nk, hogy a botunk rendelkezzen. √ân itt csak alapvet≈ë jogokat adtam neki, a **"Text Permissions"** oszlopb√≥l a **"Send Messages"**, **"Manage Messages"** √©s **"Use Slash Command"** lehet≈ës√©geket.

![enter image description here](https://i.ibb.co/9HVG01kV/04.jpg)

Ezek ut√°n a lap alj√°n kapunk egy linket, amelyet felkeresve megny√≠lik a Discord, √©s kiv√°laszthatjuk, hogy a l√©trehozott botot melyik szerver√ºnkh√∂z szeretn√©nk hozz√°adni.

![enter image description here](https://i.ibb.co/yn8DRw7c/05.jpg)

Gratul√°lok! L√©trehozt√°l egy botot!
    
Persze m√©g semmit nem tud, √©s ahogy l√°thatod a szervereden, nem akt√≠v. 
Hogyan kelts√ºk √©letre? Szerencs√©re nem kell hozz√° egy vihar, √©s k√ºl√∂nb√∂z≈ë forr√°sb√≥l sz√°rmaz√≥ emberi testr√©szek, √©s ≈ër√ºltnek sem kell lenn√ºnk. S≈ët, ha √©letre kel, nem fog elkezdeni gyilkol√°szni. (Max a szerveren.) Enn√©l j√≥val egyszer≈±bb dolgunk lesz. Ha az eddigiekkel megvagyunk, akkor nyissuk meg a let√∂lt√∂tt repo mapp√°j√°t, √©s k√∂vess√©tek velem v√©gig, hogyan √©rj√ºk el a c√©lunkat!
    
L√°thatj√°tok, hogy a fejleszt√©s sor√°n TypeScript-et haszn√°ltam. A TypeScript az√©rt j√≥, mert j√≥:
‚ÄûA TypeScript a JavaScript ‚Äûszuperk√©szlete‚Äù, amely els≈ësorban opcion√°lis statikus g√©pel√©st, oszt√°lyokat √©s interface-eket biztos√≠t. Az egyik nagy el≈ënye az, hogy lehet≈ëv√© teszi az IDE-k sz√°m√°ra, hogy gazdagabb k√∂rnyezetet biztos√≠tsanak a gyakori hib√°k √©szlel√©s√©hez a k√≥d be√≠r√°sa k√∂zben.‚Äù 
Er≈ësen t√≠pusos nyelv l√©v√©n nehezebb benne b≈ëd√ºletesen nagy h√ºlyes√©geket csin√°lni, amit ut√°na √≥r√°kon kereszt√ºl debug-olunk. Persze nem lehetetlen. √ân els≈ësorban emiatt szeretem a JavaScript ‚Äûhelyett‚Äù haszn√°lni.
    
A program gy√∂ker√©nek l√©trehoztam egy **src** mapp√°t, amin bel√ºl elk√ºl√∂n√≠tettem a **bot** √©s a napl√≥z√≥ program (**logger**) mapp√°j√°t: (m√≥dos√≠tva)
    
![enter image description here](https://i.ibb.co/DPfJHXW8/06.jpg)
    
A **bot** mapp√°m szerkezete:

![enter image description here](https://i.ibb.co/5gfTsJt6/07.jpg)
- A **client** mapp√°ban tal√°lhat√≥ f√°jlok felel≈ësek a bot inicializ√°l√°s√°√©rt, √©s a parancsok felt√∂lt√©s√©√©rt.
- A **commands** mappa tartalmazza a bot sz√°m√°ra kiadhat√≥ slash (/) parancsokat.
- Az **events** mapp√°ban tal√°lhat√≥ f√°jlban ker√ºltek defini√°l√°sra azok a f√ºggv√©nyek, amik a bot k√∂zvetlen megsz√≥l√≠t√°sa n√©lk√ºl fognak lefutni.
- Az **interactions** mapp√°ban tal√°lhat√≥ a parancsok kiad√°sa k√∂z√∂tti v√°rakoztat√°si id≈ë logik√°ja.
    
L√°ssuk akkor v√©gre, hogyan is j√∂n l√©tre a botunk:  
**Import√°ljuk a sz√ºks√©ges k√∂nyvt√°rakat** 

    import { Client } from "discord.js"; import { config } from "../../config.js";
    import { deployCommands } from "./deploy-commands.js";
    import { cooldownForInteraction } from "../interactions/cooldown.interaction.js";
    import { createMessage, answerBotMention } from "../events/messageCreate.event.js" import { logger } from "../../winston/winston.js"; 

**L√©trehozunk egy √∫j klienst, ami a Discord Developer Portal-on tal√°lhat√≥ alkalmaz√°sunk egy p√©ld√°nya lesz**  

    const client = new Client({
    	intents: ["Guilds", "GuildMessages", "DirectMessages", "MessageContent"],
    });

**Jelezz√ºk, √©s logoljuk, ha sikeres a csatlakoz√°s**

    client.once("ready", async () => {
    	await deployCommands();
    	console.log("Discord bot is ready! ü§ñ");
    	logger.info("Discord bot is ready! ü§ñ");
    });

  **Feliratkozunk a k√≠v√°nt esem√©nyekre**

    client.on("interactionCreate", async (interaction) => { 
    	await cooldownForInteraction(interaction); 
    }); 
    
    client.on("messageCreate", async (message) => {
    	if (message.author.bot) return;
    	await createMessage(message);
    	await answerBotMention(message);
    })

  **Elind√≠tjuk a botunkat**

    export function startClient() {
    	client.login(config.DISCORD_TOKEN_DEV);
    }

Ahogy m√°r a prezent√°ci√≥ban is l√°thatt√°tok, a bot inicializ√°l√°sa ebb≈ël a p√°r egyszer≈± l√©p√©sb≈ël √°ll. Az abban l√°that√≥ k√≥dhoz k√©pest is minim√°lis elt√©r√©st l√°thattok:
- M√°s jogok ker√ºltek be√°ll√≠t√°sra az intents t√∂mbben.
- A once funkci√≥ sor√°n a bot slash parancsait friss√≠tj√ºk.
- Az interctionCreate esem√©nyek kiv√°lt√°sakor v√©dekez√ºnk a t√∂meges parancs kiad√°sok ellen.
- A login funkci√≥ bejelentkezteti a botunkat a szerverre, a kor√°bban fel√≠rt token seg√≠ts√©g√©vel, amit a programban egy config.ts f√°lj seg√≠ts√©g√©vel olvasok ki a .env f√°jlb√≥l:

import dotenv from "dotenv";

import { logger } from "./winston/winston.js";

dotenv.config();

    import  dotenv  from  "dotenv";
    import { logger } from  "./winston/winston.js";

    dotenv.config();
    
    const { DISCORD_TOKEN, DISCORD_CLIENT_ID, GUILD_ID } =  process.env;
    
    if (!DISCORD_TOKEN  ||  !DISCORD_CLIENT_ID  ||  !GUILD_ID) {
	    logger.error("Missing environment variables");
	    throw  new  Error("Missing environment variables");
	}
	export  const  config  = {
		DISCORD_TOKEN,
		DISCORD_CLIENT_ID,
		GUILD_ID,
	};

- DISCORD_TOKEN: A bot alkalmaz√°s tokenje.
- DISCORD_CLIENT_ID: A bot alkalmaz√°s General Information men√ºpontj√°ban tal√°lhat√≥ Application ID.
- GUILD_ID: A Discord szerver azonos√≠t√≥ja

    
Ha mindent j√≥l csin√°ltunk, akkor a program futtat√°sa sor√°n a botunk akt√≠vk√©nt lesz jelen a szerver√ºnk√∂n!

2.  Az √ºzenetek tov√°bb√≠t√°sa
    
A **messageCreate** esem√©ny l√©trej√∂ttekor t√∂rt√©nik meg az, aminek t√∂rt√©nnie kell! 

Itt fogjuk megh√≠vni azt a funkci√≥t, ami a napl√≥z√≥ programunknak tov√°bb√≠tja a sz√ºks√©ges inform√°ci√≥t az √ºzenet napl√≥z√°s√°hoz. 

A program l√©trehoz√°sakor t√∂bb lehet≈ës√©gem volt erre. Ak√°r maga a bot is l√©trehozhatna egy adatb√°zist, √©s bele√≠rhatn√° a sz√ºks√©ges inform√°ci√≥kat. √ân azonban √∫gy gondoltam, hogy ha a j√∂v≈ëben m√°s, adatb√°zis haszn√°lat√°t megk√∂vetel≈ë funkci√≥val szeretn√©m b≈ëv√≠teni a botot, aminek gy√∂keresen m√°s fel√©p√≠t√©s≈±nek kell lennie, vagy t√∂bb olyan funkci√≥val szeretn√©m b≈ëv√≠teni, amik viselked√©s√ºkben nagyon k√ºl√∂nb√∂z≈ëek, akkor egy id≈ë ut√°n √°tl√°thatatlan, √©s nehezen karbantarthat√≥ programom lesz. Emiatt a bot-ot csak mint adattov√°bb√≠t√≥ csatorn√°t k√©pzeltem el, √©s a programot, ami napl√≥zza az √ºzenetet, k√ºl√∂n kezeltem. 

Ez√©rt hoztam l√©tre egy **logger** nev≈± mapp√°t, amiben ez a program tal√°lhat√≥. A **createMessage** funkci√≥ ennek a programnak fog k√ºldeni k√©r√©st, a body-ban tov√°bb√≠tva a sz√ºks√©ges inform√°ci√≥kat:
    
    export async function createMessage(message: OmitPartialGroupDMChannel<Message<boolean>>) { 
        try { 
        	if (message.author.bot) return; 
        	if (message.content.startsWith('<@')) return; 
        	let messageWithoutMemberId :string = message.content;
        	
        	const mentionedUsers: Collection<string, User> = message.mentions.users; 
        	
        	for (const user of mentionedUsers) { 
        		messageWithoutMemberId = messageWithoutMemberId.replace(`<@${user[0]}>, user[1].username`); 
        	}

**A sz√ºks√©ges param√©terek kisz≈±r√©se a Discord Message t√≠pusb√≥l**

    const messageData = { 
	    username: message.author.globalName, 
	    messageCreatedAt: message.createdTimestamp, 
	    content: messageWithoutMemberId, 
	}

**K√©r√©s k√ºld√©se a napl√≥z√≥ program fel√©, a body-ban az sz√ºks√©ges inform√°ci√≥val**  

    const result = await fetch("http://localhost:3000/logMessage", { 
	    method: "POST", 
	    headers: { 
		    'Content-Type': 'application/json', 
		}, 
		body: JSON.stringify({ message: messageData }), }) 
		if (result.status === 200) { 
			logger.info('Message logged by user: ${message.author.globalName}') 
		} 
	} catch (error) { 
		logger.error("Error creating message:", error); 
		} 
	}
    
A funkci√≥ elej√©n tal√°lhat√≥ ellen≈ërz√©sek a bot v√©gtelen √ºzenetk√ºld√©s ciklusba ker√ºl√©s√©nek megakad√°lyoz√°sa miatt sz√ºks√©gesek. Ha az √ºzenetet a bot hozza l√©tre, vagy csak a bot lett megeml√≠tve, akkor l√©pj√ºnk ki a funkci√≥b√≥l.

3.  Az √ºzenetek fogad√°sa
    
A napl√≥z√≥ alkalmaz√°s, ahogy m√°r tudj√°tok, a **logger** nev≈± mapp√°ban tal√°lhat√≥: 
    
![enter image description here](https://i.ibb.co/xShfhmrz/08.jpg)

Az itt l√°that√≥ mappaszerkezet az MVC mint√°t hivatott k√∂vetni.
    
- A **controller** mappa tartalmazza a controllereket.
- A **model** mappa a modelleket.
- A **view** mappa a megjelen√≠t√©shez sz√ºks√©ges f√°jlokat.
- A **types** mappa a fejleszt√©s sor√°n sz√ºks√©gess√© v√°lt t√≠pusok defin√≠ci√≥it.
- A **utils** mappa tartalmazza az egyedi hibakezel√©shez haszn√°lt oszt√°lyokat:

Tekintettel a program m√©ret√©re, √°tl√°that√≥bbnak gondoltam azt a megk√∂zel√≠t√©st, hogy k√ºl√∂n hiba oszt√°lyokat felhaszn√°lva dobok hib√°t, ezzel k√∂nnyen beazonos√≠tva, hogy a hiba okoz√°s√°√©rt melyik programr√©sz felel≈ës.

- A **database** tartalmazza az adatb√°zishoz tartoz√≥ minden sz√ºks√©ges mapp√°t √©s f√°jlt.
- A **handlers** a be√©rkez≈ë requestek kezel√©s√©√©rt felel≈ës funcki√≥kat tartalmaz√≥ f√°jlok helye.
    
Az √ºzeneteket **SQLite3** adatb√°zisban t√°rolom, melynek l√©trehoz√°sa a database.ts f√°jlban l√°that√≥: 
**Sz√ºks√©ges k√∂nyvt√°rak import√°l√°sa** 

    import sqlite3, { Database } from "sqlite3"; 
    import { SqlParams } from "../types/sqlparams.type.js"; 
    import path from "path"; 
    import fs from "fs"; 
    import { fileURLToPath } from "url"; import { logger } from "../../winston/winston.js";

**Adatb√°zis f√°jl √∫tvonal√°nak meghat√°roz√°sa** 

    const __filename = fileURLToPath(import.meta.url); 
    const __dirname = path.dirname(__filename); 
    
    let dbFolder: string; 
    logger.info("Checking if /database exists:", fs.existsSync("/database")); 
    if (fs.existsSync("/database")) { 
	    dbFolder = "/database"; 
	} else { 
		dbFolder = __dirname 
	} 
	
	const dbFilePath = path.join(dbFolder, 'DiscordMessages.db');

**Sikeres adatb√°zis f√°jl l√©trehoz√°s√°nak logol√°sa**

    logger.info(`Using SQLite database at: ${dbFilePath}`);

**Az adatb√°zis inicializ√°l√°sa**

    export const db = new sqlite3.Database(dbFilePath, (err) => { 
	    if (err) { 
		    logger.error("Failed to connect to database:", err); 
		} else { 
		    logger.info("Connected to SQLite database successfully."); 
	    } 
	});
 
    
 Az adatb√°zis h√°rom t√°bl√°t tartalmaz:    
import { Database } from "sqlite3"; import { execute } from "./database.js"; import { logger } from "../../winston/winston.js";
**Authors t√°bla**

    export const createAuthorsTable = async (db: Database): Promise<void> => { 
	    try { 
		    await execute( 
		    db, 
		    'CREATE TABLE IF NOT EXISTS Authors ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, createdAt TEXT NOT NULL)' ); 
		} catch (error) {
			logger.error("Error creating Authors table:", error); 
			};
		};
	};

**Message t√°bla**

    export const createMessagesTable = async (db: Database): Promise<void> => { 
	    try { 
		    await execute( 
			    db, 
			    'CREATE TABLE IF NOT EXISTS Messages ( id INTEGER PRIMARY KEY AUTOINCREMENT, authorId INTEGER NOT NULL, message TEXT NOT NULL, createdAt TEXT NOT NULL, FOREIGN KEY (authorId) REFERENCES Authors(id) ON DELETE CASCADE)' ); 
		} catch (error) { 
			logger.error("Error creating Messages table:", error); 
			}
		};
	};

**Letters t√°bla** 

    export const createLettersTable = async (db: Database): Promise<void> => { 
	    try { 
		    await execute( 
			    db, 
				'CREATE TABLE IF NOT EXISTS Letters ( id INTEGER PRIMARY KEY AUTOINCREMENT, authorId INTEGER NOT NULL, letter TEXT NOT NULL, count INT DEFAULT 0, createdAt TEXT NOT NULL, updatedAt TEXT NOT NULL, FOREIGN KEY (authorId) REFERENCES Authors(id) ON DELETE CASCADE)' ); 
		} catch (error) { 
			logger.error("Error creating Letters table:", error); 
		} 
	};
    
**A t√°bl√°k l√©trehoz√°sa az adatb√°zisban** 

    export const createTables = async (db: Database): Promise<void> => { 
	    try { 
		    await execute(
			    db, 
			    "PRAGMA foreign_keys = ON;");
			await createAuthorsTable(db); 
			await createMessagesTable(db); 
			await createLettersTable(db); 
		} catch (error) { 
			logger.error("Error creating tables:", error); 
		} 
	};
    
Ezek a t√°bl√°k t√°rolj√°k a megjelen√≠t√©s sor√°n felhaszn√°lt adatokat.
    
A **src** mapp√°ban m√©g l√°that√≥, de eddig nem eml√≠tett mapp√°k:
- A **scripts** a futtat√°shoz sz√ºks√©ges seg√©d scripteket tartalmaz.
- A **winston** mappa pedig a **winston logger** otthona, ami egy szuper logol√≥ k√∂nyvt√°r, aminek seg√≠ts√©g√©vel az eldobott hib√°kat a logs mapp√°ban t√°rolhatjuk.

√âszrevehett√©tek, hogy a megszokott **console.error** helyett **logger.error** haszn√°lat√°val ker√ºlnek ki√≠r√°sra a hiba√ºzenetek, ezt a winston logger k√∂nyvt√°r seg√≠ts√©g√©vel teszem: https://github.com/winstonjs/winston

A bot √°ltal k√ºld√∂tt √ºzeneteket a **/logMessage** endpointon a **messageLoggerHandler** nev≈± handler fogja kezelni. 
Ett≈ël a l√©p√©st≈ël m√°r nagyon j√≥l nyomon k√∂vethet≈ë, hogy az **MVC** minta hogyan vezeti v√©gig az adatot a programunkban. A bej√∂v≈ë k√©r√©s body-j√°ban szerepel minden inform√°ci√≥ ami a napl√≥z√°shoz sz√ºks√©ges. Mikor be√©rkezik az √ºzenet, a megfelel≈ë controller megkapja az adatot, majd ha minden rendben ment, v√°laszolunk egy 200-as st√°tusszal:
    
    export const messageLoggerHandler = async (req: Request, res: Response, next: NextFunction) => { 
	    try { 
		    const message = req.body.message; 
		    await messageLoggerController(db, message); 
		    res.sendStatus(200); 
		} catch (error) {
			logger.error("MessageLogger handler error:", error); next(error); 
		}
	};
    
A controller felel≈ës a bej√∂v≈ë adat feldolgoz√°s√°√©rt, √©s a megfelel≈ë adat megfelel≈ë modellhez t√∂rt√©n≈ë tov√°bb√≠t√°s√°√©rt:
    
export const messageLoggerController = async (db: Database, message: {username: string, messageCreatedAt: number, content: string}): Promise<void> => { try {
**Kisz≈±rj√ºk a feladathoz sz√ºks√©ges param√©tereket**

    const messageCreatedAt = new Date(message.messageCreatedAt); 
    const authorToCreate: SqlParams = [message.username, messageCreatedAt.toLocaleString()]; 
    const existingAuthor = await getAuthorByName(db, [message.username]);

**Ha m√°r szerepel az √ºzenetet l√©trehoz√≥ felhaszn√°l√≥ az adatb√°zisban, nem hozzuk l√©tre √∫jra**

    if (!existingAuthor) { 
	    await createAuthor(db, authorToCreate); 
	    logger.info('Author added to the database!', { username: message.username }); 
	}

**Ha m√©g nem szerepelt, akkor sz√ºks√©g√ºnk van az √∫jonnan l√©trej√∂tt Author id-j√°ra** `const newAuthorId = await getAuthorByName(db, [message.username]);`
**L√©trehozunk egy MessageModel-t, amit t√°rolni fogunk az adatb√°zisban**

    const messageToCreate: MessageModel = { 
	    id: 0, authorId: newAuthorId!.id, 
	    content: message.content, 
	    messageCreatedAt: messageCreatedAt.toLocaleString(), 
	}; 
		await createMessage(
			db,[messageToCreate.authorId, messageToCreate.content, messageToCreate.messageCreatedAt]); 
		
		await createLetterCountersInDatabase(db, messageToCreate); 
	} catch (error) { 
		logger.error("Error logging message:", error); 
		throw new DatabaseError("Error logging message", 500); 
		}
	};
    
**A sz√ºks√©ges ellen≈ërz≈ë l√©p√©sek v√©grehajt√°sa sor√°n eld√∂nt√©sre ker√ºl, hogy melyik model melyik funkci√≥ja ker√ºlj√∂n megh√≠v√°sra. A createAuthor fogja l√©trehozni az adatb√°zisban az √∫j Author-t**
    
    export const createAuthor = async (db: Database, params: SqlParams): Promise<void> => { 
	    const sql: string =` INSERT INTO Authors(name, createdAt) VALUES (?, ?)`; 
	    try { 
		    await execute(db, sql, params); 
		} catch (error) { 
			logger.error("Error creating author:", error); 
			throw new Error("Error creating author"); 
		} 
	};
    
**A createMessage fogja beilleszteni az √ºzenetet**

    export const createMessage = async (db: Database, params: SqlParams): Promise<void> => { 
	    const sql: string =` INSERT INTO Messages(authorId, message, createdAt) VALUES (?, ?, ?)`; 
	    try { 
		    await execute(db, sql, params); 
		} catch (error) { 
			logger.error("Error creating message:", error); 
			throw new Error("Error creating message"); 
		} 
	};
\
**V√©g√ºl a createLetterCountersInDatabase fogja friss√≠teni a bet≈±ket az adatb√°zisunkban**

    export const createLetterCountersInDatabase = async (db: Database, messageParams: MessageModel): Promise<void> => { 
	    try { 
		    const existingAuthorId = await checkAuthorIdExistense(db, [messageParams.authorId]); 
		    if (!existingAuthorId) await createLetterCounters(db, [messageParams.authorId, "", 0, messageParams.messageCreatedAt, new Date().toLocaleString()]); 
		    await letterIterator(db, messageParams); 
		} catch (error) { 
			logger.error("Error creating letters:", error); 
			throw new LetterCounterError("Error creating letters", 500); 
		} 
	};
    
Egy bej√∂v≈ë √ºzenet ezeken a l√©p√©seken kereszt√ºl fog beker√ºlni az adatb√°zisba, √©s fogja kiv√°ltani a megfelel≈ë k√≥dsorok fut√°s√°t, felhaszn√°lva az **MVC** minta √∫tmutat√°sait. A szerveren elk√ºld√∂tt √ºzeneteink enn√©l a pontn√°l m√°r l√°that√≥ak az adatb√°zisunkban!
    
4.  A megjelen√≠t√©s

A minta **View** r√©sz√©t a **view** mapp√°nkban tal√°lhat√≥ f√°jlok seg√≠ts√©g√©vel val√≥s√≠tjuk meg. Ezek a f√°jlok ker√ºlnek renderel√©sre a **view** sz√°m√°ra, hogy a kliens egy b√∂ng√©sz≈ëben megjelen√≠thet≈ë html f√°jlt kapjon az adott URL felkeres√©sekor. A **handler** mapp√°ban tal√°lhat√≥ f√°jlok a **messageLogger.handler.ts** kiv√©tel√©vel mind a napl√≥z√≥ program megjelen√≠t√©sekor t√∂rt√©n≈ë navig√°ci√≥k miatt keletkez≈ë k√©r√©sekre fogj√°k v√°laszk√©nt a megfelel≈ë view f√°jlt visszak√ºldeni, el≈ëre renderelve.
    
    export const authorsHandler = async (req: Request, res: Response, next: NextFunction) => { 
	    try { 
		    const page = parseInt(req.params['page']); 
		    const renderObject = await authorsController(db, page);
		    res.render(renderObject.viewName, renderObject.options); 
		} catch (error) { 
			logger.error("Author handler error:", error); next(error); 
		} 
	};

Hogy megk√∂nny√≠tsem a renderel√©shez sz√ºks√©ges param√©terek √°tad√°s√°t, l√©trehoztam egy **renderObject** nev≈± t√≠pust, √≠gy a controllerekben tudjuk szab√°lyozni, hogy melyik view f√°jlunk milyen adatokkal (param√©terekkel) k√©sz√ºlj√∂n el. A renderel√©shez **EJS sablonnyelvet** haszn√°ltam, √©s √°ll√≠tottam be: 

    app.set("view engine", "ejs"); 
    app.set("views", path.join(__dirname, 'logger/view'));
    
Ezt a **.ejs** kiterjeszt√©s≈± f√°jlt fogja a renderel√©s sor√°n a program egy html f√°jl√° alak√≠tva elk√ºldeni a kliensnek, ahol a b√∂ng√©sz≈ë m√°r meg tudja jelen√≠teni! Ekkor a programot futtatva, √©s a b√∂ng√©sz≈ëben a be√°ll√≠tott portot megl√°togatva l√°tni fogjuk az adatb√°zisban tal√°lhat√≥ adatokat t√°bl√°zatos form√°ban! 

![enter image description here](https://i.ibb.co/jvC197C4/author.jpg)

Ez eddig mint sz√©p √©s j√≥, van egy programunk, ami azt teszi, amit szeretn√©nk. Azonban ezt ahhoz, hogy m√°sok b√°rmikor tudj√°k haszn√°lni, ne csak amikor √©ppen fut a g√©pemen, √ºzemeltetni is kellene valahol.

T√∂bb lehet≈ës√©g is sz√≥ba ker√ºlt, de v√©g√ºl a **Fly.io**-ra esett a v√°laszt√°s. 

A **Fly.io** nagyon j√≥l konfigur√°lhat√≥, egy√ºttm≈±k√∂dik a **Docker**-el, √©s a **GitActions**-el, √≠gy be tudunk √°ll√≠tani egy workflow-t a reponkhoz, aminek seg√≠ts√©g√©vel megk√∂nny√≠thet≈ë a projekt sz√°ll√≠t√°sa a Fly.io-ra. Tesztek √≠r√°s√°val azt is megakad√°lyozhatjuk, hogy ‚Äûlecser√©lj√ºk‚Äù az akt√≠v, j√≥l m≈±k√∂d≈ë programunkat egy hib√°sra. √ân ehhez **PlayWright** teszteket √≠rtam, amiket egy fake adatokat gener√°l√≥ funkci√≥ seg√≠ts√©g√©vel √°ll√≠tok el≈ë, a tesztel√©s id≈ëtartam√°ra.
    
**A gener√°l√°s:**  
**Sz√ºks√©ges k√∂nyvt√°rak import√°l√°sa**

    import { fakerHU } from '@faker-js/faker'; 
    import { Database } from 'sqlite3'; 
    import { execute, fetchAll } from "../database.js"; 
    import { db } from "../database.js"; 
    import { logger } from '../../../winston/winston.js';

**√Ål authorok l√©trehoz√°sa**

    const createFakeAuthors = (): string[] => { 
	    const fakeAuthors: string[] = []; 
	    for (let i = 0; i < 100; i++) { 
	    const name = fakerHU.person.fullName(); 
	    const createdAt = fakerHU.date.past().toISOString();
	    fakeAuthors.push(`('${name}', '${createdAt}')`); 
	    } 
	    return fakeAuthors; 
    };
    
**Majd ezek hozz√°ad√°sa az adatb√°zishoz**

    const insertAuthors = async (db: Database, fakeAuthors: string[]): Promise<void> => { 
	    await execute(
		    db,
		    `INSERT INTO Authors (name, createdAt) VALUES ${fakeAuthors.join(", ")}`); 
	};

**Sz√ºks√©g√ºnk van ezeknek az √∫jonnan l√©trehozott authoroknak az adataira**

    const fetchAuthors = async (db: Database): Promise<{id: number; createdAt: string }[]> => { 
	    return await fetchAll(db,` SELECT id, createdAt FROM Authors`); 
	};

**Ezeket az adatokat felhaszn√°lva minden Authorhoz hozz√°kapcsoljuk a bet≈±ket az adatb√°zisban**

    const insertLetters = async (db: Database, authors: { id: number; createdAt: string }[]): Promise<void> => { 
		const alphabet: string[] = ["a", "√°", "b", "c", "d", "e", "√©", "f", "g", "h", "i", "√≠", "j", "k", "l", "m", "n", "o", "√≥", "√∂", "≈ë", "p", "q", "r", "s", "t", "u", "√∫", "√º", "≈±", "v", "w", "x", "y", "z"];  
	    const lettersData: string[] = []; 
	    authors.forEach(({ id, createdAt }) => { 
		    alphabet.forEach((letter) => { 
			    lettersData.push(`(${id}, '${letter}', '${createdAt}', '${createdAt}', 0)`); 
			 }); 
		}); 
		if (lettersData.length) { 
		   await execute(db, `INSERT INTO Letters (authorId, letter, createdAt, updatedAt, count) VALUES ${lettersData.join(", ")}`);
		} 
	};
    
**L√©trehozunk v√©letlenszer≈± √ºzeneteket, amiket a megfelel≈ë Author-hoz t√°rs√≠tunk az adatb√°zisban, √©s friss√≠tj√ºk a hozz√°juk tartoz√≥ bet≈±k darabsz√°mait**

    const  insertMessages  =  async (db:  Database, authors: { id:  number; createdAt:  string }[], letterCountMap:  Map<string, number>):  Promise<void> => {
		const  fakeMessages:  string[] = [];
    
	    for (const  author  of  authors) {
		    const  randomMessageNumber  =  Math.floor(Math.random() * (20  -  1  +  1) +  1);
        
		    for (let  i  =  0; i  <  randomMessageNumber; i++) {
		        const  content  =  fakerHU.string.fromCharacters('a√°bcde√©fghi√≠jklmno√≥√∂≈ëpqrstu√∫√º≈±vwxyz', { min:  4, max:  100 });
			    const  messageCreatedAt  =  fakerHU.date.past().toISOString();
			    fakeMessages.push(`(${author.id}, '${content}', '${messageCreatedAt}')`);
			    
			    for (const  letter  of  content) {
				    const  key  =  `${author.id}-${letter}`;
				    letterCountMap.set(key, (letterCountMap.get(key) ||  0) +  1);
			    }
			}
	   }
	   
	   if (fakeMessages.length) {
		   await  execute(db, `INSERT INTO Messages (authorId, message, createdAt) VALUES ${fakeMessages.join(", ")}`);
	   }
    };
    
    const  updateLetterCounters  =  async (db:  Database, letterCountMap:  Map<string, number>):  Promise<void> => {
	    const  updateLetterCounters:  string[] = [];
	    letterCountMap.forEach((count, key) => {
		    const [authorId, letter] =  key.split("-");
		    updateLetterCounters.push(`UPDATE Letters SET count = count + ${count} WHERE authorId = ${authorId} AND letter = '${letter}';`);
        });
    
	    if (updateLetterCounters.length) {
		    await  execute(db, updateLetterCounters.join(" "));
	    }
    };  
    
**V√©g√ºl a fent def√≠ni√°lt funkci√≥kat felhaszn√°lva felt√∂ltj√ºk az adatb√°zist**

    const fillDatabaseWithFakeData = async (db: Database): Promise<void> => { 
	    try { 
		    const fakeAuthors = createFakeAuthors(); 
			   await insertAuthors(db, fakeAuthors); 
			   const authors = await fetchAuthors(db); 
			   await insertLetters(db, authors); 
			   const letterCountMap = new Map<string, number>(); 
			   await insertMessages(db, authors, letterCountMap); 
			   await updateLetterCounters(db, letterCountMap); 
		} catch (error) { 
			   logger.error(error); } 
	};
			   
    export const runFaker = async () => { 
	    logger.info("Database filled with fake data."); 
	    await fillDatabaseWithFakeData(db); 
	};

**Ennek haszn√°lat√°hoz k√ºl√∂n scripteket hoztam l√©tre a package.json f√°jlban**  

    "prodGenerateFakeDatabaseData": "node dist/scripts/production/generateFakeDatabaseData.js",
    "prodEmptyDatabase": "node dist/scripts/production/emptyDatabase.js",
    "playwright-prod": "npm run prodGenerateFakeDatabaseData && npx playwright test && npm run prodEmptyDatabase",

Ez garant√°lja, hogy a teszt el≈ëtt legyenek adatok, majd a teszt ut√°n t√∂rl≈ëdjenek ezek az adatok.
    
**A workflow, ami a githubra t√∂rt√©n≈ë pushol√°s sor√°n fog lefutni, k√©t job-b√≥l √°ll**

    name: Fly Deploy 
    on: 
	  push: 
		branches: 
		  - production 
	jobs:

**Test job**
**Itt ker√ºl felhaszn√°l√°sra a fent le√≠rt hamis adatokkal t√∂rt√©n≈ë tesztel√©s**
**K√©t k√ºl√∂n√°ll√≥ job-ot haszn√°lok, mert √≠gy el≈ësz√∂r biztos lehetek benne, hogy minden √∫gy fog m≈±k√∂dni, ahogy √©n szeretn√©m, de kik√ºsz√∂b√∂lve azt, hogy az adatb√°zisomban a felt√∂lt√©s-t√∂rl√©s miatt ne 1-t≈ël induljon az ID.**

    test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
    with:
    node-version: lts/*
    - name: Install dependencies
    run: npm ci
    - name: Build the app
    run: npm run build
    - name: Start the app in the background
    env:
    DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
    DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
    GUILD_ID: ${{ secrets.GUILD_ID }}
    PORT: ${{ secrets.PORT }}
    LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
    run: npm start &
    - name: Wait for the app to be ready
    run: npx wait-on http://localhost:3000
    - name: Install Playwright Browsers
    run: npx playwright install --with-deps
    - name: Run Playwright tests
    run: npm run playwright-prod
    - uses: actions/upload-artifact@v4
    if: ${{ cancelled() === false }}
    with:
    name: playwright-report
    path: playwright-report/
    retention-days: 30

**Deploy a Fly.io-ra** 

    deploy:
    name: Deploy app
    needs: test
    runs-on: ubuntu-latest
    concurrency: deploy-group  # optional: ensure only one action runs at a time
    steps:
    - uses: actions/checkout@v4
    - uses: superfly/flyctl-actions/setup-flyctl@master
    - name: Set Fly.io secrets
    run: |
    flyctl secrets set \
    DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }} \
    DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }} \
    GUILD_ID=${{ secrets.GUILD_ID }} \
    PORT=${{ secrets.PORT }} \
    LOG_LEVEL=${{ secrets.LOG_LEVEL }}
    env:
    FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    - run: flyctl deploy --remote-only
    env:
    FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

√çgy biztos lehetek abban, hogy a Fly.io-ra csak egy megfelel≈ëen m≈±k√∂d≈ë verzi√≥ fog kiker√ºlni. 
A sz√ºks√©ges **secret**-eket a github repo be√°ll√≠t√°sai k√∂z√∂tt tudjuk hozz√°adni! 
Ezzel biztos√≠tjuk, hogy publikusan semmilyen √©rz√©keny inform√°ci√≥ nem ker√ºl ki l√°that√≥ m√≥don.  

**√ñsszegz√©s** 

A projekt megval√≥s√≠t√°sa sor√°n rengeteget tanultam. Implement√°l√°s el≈ëtt mindent pr√≥b√°ltam el≈ëre √°tgondolni, √©s mindenre felk√©sz√ºlni, de sokszor bebizonyosodott, hogy ez szinte lehetetlen. Ez ismer≈ës lehet nektek is. 

T√∂bbsz√∂r belefutottam abba, hogy egy-egy komplett logikai r√©szt kellett teljesen t√∂r√∂ln√∂m, √©s el√∂lr≈ël kezdenem. B√°r emiatt √∫gy √©rzem, sokat fejl≈ëdtem, hiszen tal√°n legt√∂bbet hib√°k megold√°s√°val tanulunk, nem ez a j√≥ √∫t, mert √©rt√©kes id≈ët tudok ez√°ltal vesz√≠teni, √©s ahogy n≈ë a programunk, √©s n≈ënek a f√ºgg≈ës√©gek, a refaktor√°l√°s is egy r√©m√°lomm√° tud v√°lni. 

Ennek kik√ºsz√∂b√∂l√©s√©re kellett volna haszn√°lom a **TDD (Test-driver Development)** folyamatot, ami nagyban megk√∂nny√≠ti a fejleszt√©si folyamatot. ≈êszint√©n be kell vallanom, hogy enn√©l a projektemn√©l ezt nem siker√ºlt k√∂vetnem. A k√∂vetkez≈ë projekt eset√©n ezt a technik√°t fogom szem el≈ëtt tartani, levonva a mostani folyamat tanuls√°gait, √©s annak v√©g√©n titeket is megismertetve vele! 

Ennek ellen√©re a program logik√°j√°nak megalkot√°sa, √©s t√∂rekv√©sem arra, hogy min√©l automatiz√°ltabban m≈±k√∂djenek a l√©p√©sek, figyelve a hibalehet≈ës√©gekre, sokat seg√≠tettek, hogy ism√©t l√©pjek egy fokot a l√©pcs≈ën, ami a kor elv√°r√°sainak megfelel≈ë fejleszt≈ëk emelet√©re vezet.  

Amint l√°thatj√°tok, ha megfelel≈ëen kiokos√≠tjuk magunkat, √©s megkeress√ºk a megfelel≈ë technol√≥gi√°kat, akkor egy ilyen els≈ëre teljes√≠thetetlennek t≈±n≈ë feladatot is meg tudunk oldani.

Ti mit gondoltok, mit csin√°ln√°tok m√°sk√©pp?
---